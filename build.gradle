/* Gradle script for build of FIDATA Documentation
   Copyright (C) 2014  Basil Peace

   This file is part of FIDATA Documentation.

   FIDATA Documentation is free software: you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   FIDATA Documentation is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FIDATA Documentation.  If not, see
   <http://www.gnu.org/licenses/>. */

apply plugin: 'eclipse'

buildscript {
	repositories {
		jcenter()
		maven {
			url "$artifactory_contextUrl/plugins-release"
			credentials {
				username = artifactory_user
				password = artifactory_password
			}
		}
	}
	dependencies {
		classpath(
			group: 'org.jfrog.buildinfo',
			name: 'build-info-extractor-gradle',
			version: '2.2.3'
		)
	}
}


// Plugins

apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'


// Project info

group = 'FIDATA'
version = '0.3-SNAPSHOT'
// buildInfo.build.name = ''
// buildInfo.build.number = ''


// Sources
// sourceSets {
// 	main { resources { srcDir 'src/site/**' } }
// }


// Tasks

def stagingDir = buildDir

configurations {
	compile
	runtime
}

dependencies {
	compile group: 'FIDATA', name: 'fonts', version: '0.3-SNAPSHOT', ext: 'zip'
	compile group: 'FIDATA', name: 'report-template', version: "0.3-SNAPSHOT", ext: 'zip'
}

distributions {
	main {
		contents {
			// TODO: make explicit list of files
			// 1.	Some images may happen to be converted in *.pdf
			// 2.	License should be included into documentation
			from("$stagingDir") {
				include '*.pdf'
			}
		}
	}
}


artifactory {
	contextUrl = artifactory_contextUrl
	publish {
		repository {
			repoKey = 'libs-snapshot-local'
			username = artifactory_user
			password = artifactory_password
			maven = true
		}
		defaults {
			publications ('artifactPublication')
		}
	}
	resolve {
		repository {
			repoKey = 'libs-snapshot'
			username = artifactory_user
			password = artifactory_password
			maven = true
		}
	}
}

defaultTasks 'all'

task mkStagingDir << {
	stagingDir.mkdirs()
}

task copySources(type: Copy) {
	dependsOn mkStagingDir
	from('src/site/tex') {
		include '**'
	}
	into stagingDir
}

task explodeDeps {
	dependsOn mkStagingDir
	dependsOn configurations.compile
	doLast {
		configurations.compile.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact artifact ->
			if ((artifact.moduleVersion.id.group == 'FIDATA') && (artifact.moduleVersion.id.name == 'fonts')) {
				def fileName = "$stagingDir/${artifact.file.name}" - ".zip"
				copy {
					from(zipTree(artifact.file))
					into stagingDir
				}
				file("$fileName/fonts").renameTo(file("$stagingDir/fonts"))
				file(fileName).delete()

			}
			if ((artifact.moduleVersion.id.group == 'FIDATA') && (artifact.moduleVersion.id.name == 'report-template')) {
				copy {
					from(zipTree(artifact.file))
					into stagingDir
				}
				def dir = file("$stagingDir/${artifact.file.name}" - ".zip")
				fileTree(dir).each { File f ->
					f.renameTo(file("$stagingDir/${f.name}"))
				}
				dir.delete()
			}
		}
	}
}

task latexmkBuild(type: Exec) {
	dependsOn copySources, explodeDeps
	workingDir stagingDir
	commandLine 'latexmk'
}

task build {
	dependsOn latexmkBuild
}

distZip {
	dependsOn build
}

artifactoryPublish {
	dependsOn distZip
}

task all {
	dependsOn artifactoryPublish
}

// Settings


publishing {
	publications {
		artifactPublication(MavenPublication) { // TODO: classifiers
			artifact("$buildDir/distributions/${project.name}-${project.version}.zip")
		}
	}
}
